 # Set your OpenAI API key as an environment variable
import os
import openai
from openai import OpenAI
import time
def meditate_affirmations(transcript, key):
    
    os.environ["OPENAI_API_KEY"] = key
    class ChatCompletionMessage:
        def __init__(self, content, role, function_call=None, tool_calls=None):
            self.content = content
            self.role = role
            self.function_call = function_call
            self.tool_calls = tool_calls

        def get_text_content(self):
            # Return only the text content
            return self.content
        # Initialize the OpenAI client
    client = openai.OpenAI()

    # Your code for interacting with the OpenAI API goes here
    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": 'you are going to take this affirmation tape and you are going to return a list of the seven best affirmations in the affirmation tape.please note that anything you say will be passed of raw codeplease do not sayanything over than affirmations because they will be read out loud.that means no numbers nobulletpointsjust affirmationsformatted in the same way as the text I give you.remember to give no commentary.please also do not edit the affirmations in any way they must retain their original wording.please she is the sevenbest affirmations which sum upthe whole tape into seven. end each with a period.'}, 
            {'role': "user", "content": transcript}
        ]
    )


    # Extract the actual content generated by GPT-3.5 Turbo
    generated_message = completion.choices[0].message
    generated_message_object = ChatCompletionMessage(
        content=generated_message.content,
        role='assistant'  # Assuming the role is 'assistant'
    )

    # Print out the text that will be read
    text_content = generated_message_object.get_text_content()
    # Save the text content to a file
    with open('output_text_short.txt', 'w') as file:
        file.write(text_content)
    
    return text_content
  
